use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};

// ******************************************
// * mgmt-server REST API schemas           *
// * autogenerated by openapi-generator-cli *
// ******************************************

pub mod mgmt_server_rest {
    include!(concat!(env!("OUT_DIR"), "/mgmt-server-rest.rs"));
}

// *******************************************
// * Factorio Mod Portal API schemas         *
// * autogenerated by openapi-generator-cli  *
// *******************************************

pub mod factorio_mod_portal_api {
    include!(concat!(env!("OUT_DIR"), "/factorio-mod-portal.rs"));
}

// *************************
// * WebSocket API schemas *
// *************************

#[derive(Clone, Debug, Deserialize, derive_more::From, derive_more::Into, Serialize)]
pub struct OperationId(String);

#[derive(Debug, Deserialize, Serialize)]
pub struct AgentRequestWithId {
    pub operation_id: OperationId,
    pub message: AgentRequest,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum AgentRequest {
    // Installation management
    VersionInstall {
        version: String,
        force_install: bool,
    },
    VersionGet,

    // Server control
    ServerStart(ServerStartSaveFile),
    ServerStop,
    ServerStatus,

    // Save management
    SaveCreate(String),
    SaveList,

    // Mod management
    ModListGet,
    ModListSet(Vec<ModObject>),
    ModSettingsGet,
    ModSettingsSet(Vec<u8>),

    // Configuration
    ConfigAdminListGet,
    ConfigAdminListSet {
        admins: Vec<String>,
    },
    ConfigRconGet,
    ConfigRconSet {
        password: String,
    },
    ConfigSecretsGet,
    ConfigSecretsSet {
        username: String,
        token: String,
    },
    ConfigServerSettingsGet,
    ConfigServerSettingsSet {
        json: String,
    },

    // In-game
    RconCommand(String),
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct AgentResponseWithId {
    pub operation_id: OperationId,
    pub status: OperationStatus,
    pub content: AgentOutMessage,
}

#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub enum OperationStatus {
    Completed,
    Failed,
    Ongoing,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum AgentOutMessage {
    // Generic responses
    Message(String),
    Error(String),
    Ok,

    // Structured operation responses
    ConfigAdminList(Vec<String>),
    ConfigRcon { port: u16, password: String },
    ConfigSecrets(Option<SecretsObject>),
    ConfigServerSettings(String),
    FactorioVersion(FactorioVersion),
    ModsList(Vec<ModObject>),
    ModSettings(Option<Vec<u8>>),
    MissingSecrets,
    NotInstalled,
    RconResponse(String),
    SaveList(Vec<Save>),
    ServerStatus(ServerStatus),
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum ServerStartSaveFile {
    Latest,
    Specific(String),
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum ServerStatus {
    NotRunning,
    PreGame,
    InGame { player_count: u32 },
    PostGame,
}

#[derive(Clone, Debug, Deserialize, derive_more::From, derive_more::Into, Serialize)]
pub struct FactorioVersion(String);

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Save {
    pub name: String,
    pub last_modified: DateTime<Utc>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct ModObject {
    pub name: String,
    pub version: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct SecretsObject {
    pub username: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum AgentStreamingMessage {
    ServerStdout(String),
}
