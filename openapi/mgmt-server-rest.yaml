openapi: 3.0.0
info:
  title: fctrl mgmt-server REST API
  description: REST API exposed by fctrl mgmt-server
  version: 0.1.0

servers:
  - url: /api/v0

paths:
  /server/control:
    get:
      summary: Returns the status of the Factorio multiplayer server.
      responses:
        '200':
          description: A JSON object indicating the status of the Factorio multiplayer server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerControlStatus'
  /server/control/start:
    post:
      summary: Sends a request to start the Factorio multiplayer server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerControlStartPostRequest'
      responses:
        '202':
          description: Accepted
  /server/control/stop:
    post:
      summary: Sends a request to stop the Factorio multiplayer server.
      responses:
        '202':
          description: Accepted
  /server/install:
    get:
      summary: Gets the currently installed version of Factorio.
      responses:
        '200':
          description: A JSON object indicating the version of Factorio installed on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInstallGetResponse'
    post:
      summary: Upgrades the Factorio server to the specified version, or install if no version previously installed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerInstallPostRequest'
      responses:
        '202':
          description: Request accepted, check the Location header for a websocket address to connect and monitor progress of the operation.
  /server/savefile:
    get:
      summary: Gets a list of savefiles currently on the server
      responses:
        '200':
          description: A JSON array containing Savefile objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSavefileGetResponse'
  /server/savefile/{savefile_id}:
    put:
      summary: Create a savefile on the server
      parameters:
        - name: savefile_id
          in: path
          description: Name of the savefile to create
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Request accepted, check the Location header for a websocket address to connect and monitor progress of the operation.
  /server/config/adminlist:
    get:
      summary: Gets the adminlist the Factorio server is configured to use.
      responses:
        '200':
          description: A JSON array containing strings representing users with admin permissions on the Factorio server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigAdminList'
    put:
      summary: Pushes an adminlist to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigAdminList'
      responses:
        '200':
          description: Ok
  /server/config/rcon:
    get:
      summary: Gets the RCON configuration used by the Factorio server.
      responses:
        '200':
          description: A JSON object representing the RCON configuration used by the Factorio server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigRconGetResponse'
    put:
      summary: Pushes an RCON to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigRconPutRequest'
      responses:
        '200':
          description: Ok
  /server/config/secrets:
    get:
      summary: Gets the Factorio.com account credentials stored on the server, required for public server listing and downloading mods.
      responses:
        '200':
          description: A JSON object representing the secrets stored on the server. The token field returned will always be null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigSecrets'
        '204':
          description: This response indicates that secrets have not been provided and stored on the server.
    put:
      summary: Pushes Factorio.com account credentials to the server, for use with public server listing and downloading mods.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigSecrets'
      responses:
        '200':
          description: Ok
  /server/config/server-settings:
    get:
      summary: Gets the server-settings.json file used by the Factorio server.
      responses:
        '200':
          description: The server-settings JSON file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigServerSettings'
        '204':
          description: This response indicates that the server-settings JSON file is not initialised on the server. To remediate, either start the server once to automatically generate it, or manually push one to the server.
    put:
      summary: Pushes a server-settings file to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigServerSettings'
      responses:
        '200':
          description: Ok
  /server/mods/list:
    get:
      summary: Gets a list of mods installed on the Factorio server.
      responses:
        '200':
          description: A JSON array of objects representing mods installed on the Factorio server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerModList'
    post:
      summary: Applies a list of mods to the Factorio server. This is done in a declarative approach, and will start a long-running operation to install and uninstall mods as necessary to match the desired configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerModList'
      responses:
        '202':
          description: Request accepted, check the Location header for a websocket address to connect and monitor progress of the operation.

components:
  schemas:
    ServerControlStatus:
      required:
        - game_status
        - player_count
      properties:
        game_status:
          type: string
          enum:
            - NotRunning
            - PreGame
            - InGame
            - PostGame
        player_count:
          type: integer
    ServerControlStartPostRequest:
      required:
        - savefile
      properties:
        savefile:
          type: string
          description: Name of the savefile to use
    ServerInstallGetResponse:
      required:
        - version
      properties:
        version:
          type: string
          description: Version of Factorio installed on the server.
    ServerInstallPostRequest:
      required:
        - version
      properties:
        version:
          type: string
          description: Version of Factorio to install
        force_install:
          type: boolean
          description: If set, force a reinstall if the specified version is already installed
    ServerConfigAdminList:
      type: array
      items:
        type: string
    ServerConfigRconGetResponse:
      required:
        - port
        - password
      properties:
        port:
          type: integer
          description: Port used for RCON connection
        password:
          type: string
          description: Password for RCON connection
    ServerConfigRconPutRequest:
      required:
        - password
      properties:
        password:
          type: string
          description: Password for RCON connection
    ServerConfigSecrets:
      required:
        - username
        - token
      properties:
        username:
          type: string
        token:
          nullable: true
          type: string
    ServerConfigServerSettings:
      type: string
    ServerModList:
      type: array
      items:
        $ref: '#/components/schemas/ModObject'
    ModObject:
      required:
        - name
        - version
      properties:
        name:
          type: string
        version:
          type: string
    SavefileObject:
      required:
        - name
      properties:
        name:
          type: string
        last_modified:
          type: string
          format: date-time
    ServerSavefileGetResponse:
      type: array
      items:
        $ref: '#/components/schemas/SavefileObject'
