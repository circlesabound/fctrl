openapi: 3.0.0
info:
  title: fctrl mgmt-server REST API
  description: REST API exposed by fctrl mgmt-server
  version: 0.1.0

servers:
  - url: /api/v1

paths:
  /auth/info:
    get:
      summary: Returns the type of auth required to access the rest of the API
      responses:
        '200':
          description: A JSON object describing required auth
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthInfo'
  /auth/discord/grant:
    post:
      summary: Redirect URL for OAuth code grant flow
      parameters:
        - name: code
          in: query
          description: OAuth access code
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: Redirect URI used for the OAuth flow, URL-encoded
          required: true
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
  /auth/discord/refresh:
    post:
      summary: Obtain a fresh access token while already authenticated
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'

  /server/control:
    get:
      summary: Returns the status of the Factorio multiplayer server.
      responses:
        '200':
          description: A JSON object indicating the status of the Factorio multiplayer server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerControlStatus'
  /server/control/start:
    post:
      summary: Sends a request to start the Factorio multiplayer server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerControlStartPostRequest'
      responses:
        '202':
          description: Accepted
  /server/control/stop:
    post:
      summary: Sends a request to stop the Factorio multiplayer server.
      responses:
        '202':
          description: Accepted
  /server/control/create:
    post:
      summary: Sends a request to create a new savefile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerControlCreatePostRequest'
      responses:
        '202':
          description: Request accepted, check the Location header for a websocket address to connect and monitor progress of the operation.
  /server/install:
    get:
      summary: Gets the currently installed version of Factorio.
      responses:
        '200':
          description: A JSON object indicating the version of Factorio installed on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInstallGetResponse'
    post:
      summary: Upgrades the Factorio server to the specified version, or install if no version previously installed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerInstallPostRequest'
      responses:
        '202':
          description: Request accepted, check the Location header for a websocket address to connect and monitor progress of the operation.
  /server/savefiles:
    get:
      summary: Gets a list of savefiles currently on the server
      responses:
        '200':
          description: A JSON array containing Savefile objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSavefileGetResponse'
  /server/savefiles/{savefile_id}:
    get:
      summary: Downloads the requested savefile as a zip
      parameters:
        - name: savefile_id
          in: path
          description: Name of the savefile to be uploaded to the server
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Savefile zip
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      summary: Pushes a savefile to the server for use
      parameters:
        - name: savefile_id
          in: path
          description: Name of the savefile to be uploaded to the server
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Ok
  /server/config/adminlist:
    get:
      summary: Gets the adminlist the Factorio server is configured to use.
      responses:
        '200':
          description: A JSON array containing strings representing users with admin permissions on the Factorio server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigAdminList'
    put:
      summary: Pushes an adminlist to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigAdminList'
      responses:
        '200':
          description: Ok
  /server/config/banlist:
    get:
      summary: Gets the ban list the Factorio server is configured to use.
      responses:
        '200':
          description: A JSON array containing strings representing users that are not permitted to join the Factorio server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigBanList'
    put:
      summary: Pushes a ban list to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigBanList'
      responses:
        '200':
          description: Ok
  /server/config/whitelist:
    get:
      summary: Gets the user whitelist for the Factorio server
      responses:
        '200':
          description: A JSON object containing a boolean indicating whether the whitelist is to be used, as well as an array of users allowed on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigWhiteList'
    put:
      summary: Pushes a user whitelist to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigWhiteList'
      responses:
        '200':
          description: Ok
  /server/config/rcon:
    get:
      summary: Gets the RCON configuration used by the Factorio server.
      responses:
        '200':
          description: A JSON object representing the RCON configuration used by the Factorio server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigRconGetResponse'
    put:
      summary: Pushes an RCON to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigRconPutRequest'
      responses:
        '200':
          description: Ok
  /server/config/secrets:
    get:
      summary: Gets the Factorio.com account credentials stored on the server, required for public server listing and downloading mods.
      responses:
        '200':
          description: A JSON object representing the secrets stored on the server. The token field returned will always be null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigSecrets'
        '204':
          description: This response indicates that secrets have not been provided and stored on the server.
    put:
      summary: Pushes Factorio.com account credentials to the server, for use with public server listing and downloading mods.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigSecrets'
      responses:
        '200':
          description: Ok
  /server/config/server-settings:
    get:
      summary: Gets the server-settings.json file used by the Factorio server.
      responses:
        '200':
          description: The server-settings JSON file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigServerSettings'
    put:
      summary: Pushes a server-settings file to the Factorio server for use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigServerSettings'
      responses:
        '200':
          description: Ok
  /server/mods/list:
    get:
      summary: Gets a list of mods installed on the Factorio server.
      responses:
        '200':
          description: A JSON array of objects representing mods installed on the Factorio server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerModList'
    post:
      summary: Applies a list of mods to the Factorio server. This is done in a declarative approach, and will start a long-running operation to install and uninstall mods as necessary to match the desired configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerModList'
      responses:
        '202':
          description: Request accepted, check the Location header for a websocket address to connect and monitor progress of the operation.
  /server/mods/settings:
    get:
      summary: Gets the mod-settings.dat file used by the Factorio server.
      responses:
        '200':
          description: The contents of the mod-settings.dat file, converted to a JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModSettingsObject'
    put:
      summary: Pushes a mod-settings.dat file to the Factorio server for use
      requestBody:
        required: true
        description: A mod-settings.dat file, converted to a JSON format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModSettingsObject'
      responses:
        '200':
          description: Ok
  /server/rcon:
    post:
      summary: Send a command over RCON to the Factorio game instance.
      requestBody:
        required: true
        description: The command to send to the game instance.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RconCommandRequest'
      responses:
        '200':
          description: The response to the command from the game instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RconCommandResponse'
  /logs/{category}:
    get:
      summary: Fetches ingested logs
      parameters:
        - name: category
          in: path
          description: Category of logs to get
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: How many logs to get per page
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: direction
          in: query
          description: Which direction to iterate over logs from the starting position
          required: true
          schema:
            type: string
            enum:
              - "Forward"
              - "Backward"
        - name: from
          in: query
          description: Iteration starting position. If empty, Forward iteration will start at the earliest entry, and Backward iteration will start at the latest entry.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The requested logs, plus a URL at which to continue iteration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPaginationObject'
  /logs/{category}/stream:
    get:
      summary: Request a WebSocket connection to stream incoming logs of the given category
      parameters:
        - name: category
          in: path
          description: Category of logs to stream
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Accepted, see the Location header for stream location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogStreamPreviousMarker'
  /metrics/{name}:
    get:
      summary: Fetches ingested metric datapoints
      parameters:
        - name: name
          in: path
          description: Name of the metric to get
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: How many datapoints to get per page
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: period
          in: query
          description: Represents the granularity of datapoints to fetch, read higher period / lower granularity data points to reduce the load on the system
          required: true
          schema:
            $ref: '#/components/schemas/MetricsPeriod'
        - name: direction
          in: query
          description: Which direction to iterate over datapoints from the starting position
          required: true
          schema:
            type: string
            enum:
              - "Forward"
              - "Backward"
        - name: from
          in: query
          description: Iteration starting position. If empty, Forward iteration will start at the earliest datapoint, and Backward iteration will start at the latest datapoint
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The requested metric datapoints, plus a URL at which to continue iteration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsPaginationObject'

components:
  schemas:
    AuthInfo:
      required:
        - provider
      properties:
        provider:
          type: string
          enum:
            - none
            - discord
        discord:
          $ref: "#/components/schemas/AuthInfoDiscord"
    AuthInfoDiscord:
      required:
        - client_id
      properties:
        client_id:
          type: string
          description: Application client ID to use for the code grant flow
    OAuthTokenResponse:
      required:
        - access_token
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
          description: Number of seconds the access token will be valid for, refresh the token before this is up
    ServerControlStatus:
      required:
        - game_status
        - player_count
      properties:
        game_status:
          type: string
          enum:
            - NotRunning
            - PreGame
            - InGame
            - PostGame
        player_count:
          type: integer
    ServerControlCreatePostRequest:
      required:
        - savefile
      properties:
        savefile:
          type: string
          description: Name of the savefile to create
    ServerControlStartPostRequest:
      required:
        - savefile
      properties:
        savefile:
          type: string
          description: Name of the savefile to use
    ServerInstallGetResponse:
      required:
        - version
      properties:
        version:
          type: string
          description: Version of Factorio installed on the server.
    ServerInstallPostRequest:
      required:
        - version
      properties:
        version:
          type: string
          description: Version of Factorio to install
        force_install:
          type: boolean
          description: If set, force a reinstall if the specified version is already installed
    ServerConfigAdminList:
      type: array
      items:
        type: string
    ServerConfigBanList:
      type: array
      items:
        type: string
    ServerConfigWhiteList:
      required:
        - enabled
        - users
      properties:
        enabled:
          type: boolean
          description: Whether the whitelist is to be used or not
        users:
          type: array
          items:
            type: string
    ServerConfigRconGetResponse:
      required:
        - port
        - password
      properties:
        port:
          type: integer
          description: Port used for RCON connection
        password:
          type: string
          description: Password for RCON connection
    ServerConfigRconPutRequest:
      required:
        - password
      properties:
        password:
          type: string
          description: Password for RCON connection
    ServerConfigSecrets:
      required:
        - username
        - token
      properties:
        username:
          type: string
        token:
          nullable: true
          type: string
    ServerConfigServerSettings:
      required:
        - name
        - description
        - tags
        - visibility
        - autosave_interval
        - autosave_only_on_server
        - non_blocking_saving
        - game_password
        - require_user_verification
        - max_players
        - ignore_player_limit_for_returning_players
        - allow_commands
        - only_admins_can_pause_the_game
        - max_upload_in_kilobytes_per_second
        - max_upload_slots
        - minimum_latency_in_ticks
        - max_heartbeats_per_second
        - minimum_segment_size
        - minimum_segment_size_peer_count
        - maximum_segment_size
        - maximum_segment_size_peer_count
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        visibility:
          required:
            - public
            - lan
          properties:
            public:
              type: boolean
            lan:
              type: boolean
        autosave_interval:
          type: integer
        autosave_only_on_server:
          type: boolean
        non_blocking_saving:
          type: boolean
        game_password:
          type: string
        require_user_verification:
          type: boolean
        max_players:
          type: integer
        ignore_player_limit_for_returning_players:
          type: boolean
        allow_commands:
          type: string
          enum:
            - "true"
            - "false"
            - "admins-only"
        only_admins_can_pause_the_game:
          type: boolean
        max_upload_in_kilobytes_per_second:
          type: integer
        max_upload_slots:
          type: integer
        minimum_latency_in_ticks:
          type: integer
        max_heartbeats_per_second:
          type: integer
        minimum_segment_size:
          type: integer
        minimum_segment_size_peer_count:
          type: integer
        maximum_segment_size:
          type: integer
        maximum_segment_size_peer_count:
          type: integer
    ServerModList:
      type: array
      items:
        $ref: '#/components/schemas/ModObject'
    ModObject:
      required:
        - name
        - version
      properties:
        name:
          type: string
        version:
          type: string
    SavefileObject:
      required:
        - name
      properties:
        name:
          type: string
        last_modified:
          type: string
          format: date-time
    ServerSavefileGetResponse:
      type: array
      items:
        $ref: '#/components/schemas/SavefileObject'
    ModSettingsObject:
      description: A mod-settings.dat file, converted into a JSON format
      type: object
    RconCommandRequest:
      required:
        - command
      properties:
        command:
          type: string
    RconCommandResponse:
      required:
        - response
      properties:
        response:
          type: string
    LogsPaginationObject:
      required:
        - logs
      properties:
        next:
          description: Iteration position of the next iteration of this log query. If this is empty, then no more data is available.
          type: string
        logs:
          type: array
          items:
            type: string
    LogStreamPreviousMarker:
      properties:
        previous:
          description: Iteration position of the last ingested log entry before the stream, if any exists. This can be used to iterate backwards to fetch older entries.
          type: string
    MetricsPeriod:
      type: string
      enum:
        - "PT5S"
        - "PT30S"
        - "PT1M"
        - "PT5M"
        - "PT30M"
        - "PT1H"
        - "PT6H"
        - "PT12H"
        - "P1D"
    MetricsDataPoint:
      required:
        - tick
        - period
        - value
      properties:
        tick:
          description: Timestamp of the end of the period represented by this data point
          type: integer
          format: int64
        period:
          description: Period over which this data point's value is aggregated over
          $ref: '#/components/schemas/MetricsPeriod'
        value:
          description: Value of the data point
          type: number
          format: double
    MetricsPaginationObject:
      required:
        - datapoints
      properties:
        next:
          description: Iteration position of the next iteration of this metrics query. If this is empty, then no more data is available.
          type: string
        datapoints:
          type: array
          items:
            $ref: '#/components/schemas/MetricsDataPoint'
